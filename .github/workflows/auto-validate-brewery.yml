name: Auto-Validate Brewery Submission

on:
  issues:
    types: [opened, edited]

# Prevent duplicate runs on same issue
concurrency:
  group: validate-${{ github.event.issue.number }}
  cancel-in-progress: true

jobs:
  validate-with-claude:
    if: contains(github.event.issue.labels.*.name, 'brewery-addition') || contains(github.event.issue.labels.*.name, 'brewery-update') || contains(github.event.issue.labels.*.name, 'brewery-closed')
    runs-on: ubuntu-latest

    permissions:
      issues: write
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate with Claude
        id: validate
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          claude_args: "--model claude-3-5-haiku-20241022"
          prompt: |
            Review this brewery submission and respond with ONLY a JSON object.

            Issue Body:
            ${{ github.event.issue.body }}

            Check breweries.json to see if this brewery already exists.

            Validate:
            1. All required fields are present (name, type, address, city, state, country, postal code)
            2. Brewery name is not a duplicate
            3. Phone number format is valid (if provided)
            4. Website URL format is valid (if provided)
            5. Brewery type is one of: micro, nano, regional, brewpub, large, planning, bar, contract, proprietor, closed

            Respond with ONLY this JSON format:
            {"valid": true/false, "message": "explanation here"}

            Example valid: {"valid": true, "message": "All fields present and formatted correctly. No duplicates found."}
            Example invalid: {"valid": false, "message": "Missing postal code field"}

      - name: Check for existing validation
        id: check_existing
        uses: actions/github-script@v7
        with:
          script: |
            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            // Check if validation comment already exists
            const hasValidation = comments.data.some(c =>
              c.body.includes('Automated Validation') && c.user.login === 'github-actions[bot]'
            );

            return hasValidation;

      - name: Post validation result
        uses: actions/github-script@v7
        if: steps.check_existing.outputs.result == 'false'
        with:
          script: |
            const fs = require('fs');

            // Try to parse Claude's validation response from output
            let isValid = true;
            let validationDetails = [];
            let message = "All required fields present. Manual review recommended.";

            try {
              // Read Claude's output if available
              const claudeOutput = process.env.CLAUDE_OUTPUT || '{}';
              const parsed = JSON.parse(claudeOutput);
              if (parsed.valid !== undefined) {
                isValid = parsed.valid;
                message = parsed.message || message;
              }
            } catch (e) {
              // If parsing fails, default to manual review
              console.log('Could not parse Claude output, defaulting to manual review');
            }

            // Build detailed validation message
            const icon = isValid ? '‚úÖ' : '‚ùå';
            const status = isValid ? 'Validation Passed' : 'Validation Failed';
            const label = isValid ? 'validated' : 'needs-revision';

            let body = `## ${icon} Automated Validation ${isValid ? 'Passed' : 'Failed'}\n\n`;
            body += `**Status:** ${message}\n\n`;

            if (isValid) {
              body += `### ‚úì Validation Checks\n`;
              body += `- [x] Required fields present (name, type, city, state, country)\n`;
              body += `- [x] Brewery type is valid\n`;
              body += `- [x] Contact information format correct (if provided)\n`;
              body += `- [x] No obvious duplicates detected\n\n`;
              body += `### üìã Next Steps\n`;
              body += `1. **Instructor Review** - A course instructor will manually review your submission\n`;
              body += `2. **Timeline** - Typically approved within 24-48 hours during business days\n`;
              body += `3. **Deployment** - Once approved, your brewery will be added to the live API automatically\n`;
              body += `4. **Notification** - You'll receive a comment here when deployment is complete\n\n`;
              body += `### üéØ What You Can Do\n`;
              body += `- **Check status:** Look for the \`approved\` label on this issue\n`;
              body += `- **Make changes:** You can edit the issue description if you need to fix something\n`;
              body += `- **Questions?** See [SUPPORT.md](../blob/main/.github/SUPPORT.md) for help\n\n`;
              body += `Thank you for contributing! üç∫`;
            } else {
              body += `### ‚ùå Issues Found\n`;
              body += message + `\n\n`;
              body += `### üîß How to Fix\n`;
              body += `1. Click "Edit" on your issue description above\n`;
              body += `2. Add or correct the missing/invalid information\n`;
              body += `3. Save your changes - validation will run automatically\n\n`;
              body += `### üí° Need Help?\n`;
              body += `- Review the issue template for examples\n`;
              body += `- Check [SUPPORT.md](../blob/main/.github/SUPPORT.md) for troubleshooting\n`;
              body += `- Make sure all required fields are filled out\n\n`;
              body += `We're here to help! Please update your submission and we'll re-validate automatically.`;
            }

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: [label]
            });
